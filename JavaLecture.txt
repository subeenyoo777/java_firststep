2강. Java 기본 문법(1)
📌 숲 (전체 흐름 요약)
1️⃣ Java 프로그램 구조:
    클래스/메소드 구조 이해
    객체 생성 & 메소드 호출 흐름

2️⃣ 식별자/키워드/자료형:
    이름 붙이는 규칙 → 코드 가독성 확보
    변수/데이터의 종류(기본형 vs 참조형)

3️⃣ 연산자 & 제어문:
    연산자 우선순위
    if/switch/for/while 반복문 & 점프문



1️⃣ Java 프로그램 구조:
    ☑️자바는 클래스와 객체로 동작한다!
        🔑 핵심
            - class: 객체의 설계도
            - new : 실물 객체( = 인스턴스) 생성
            - . : 객체가 가진 메서드, 변수에 접근
            - main : 프로그램이 시작되는 곳이다.

        1. 클래스(class) 선언
            : 프로그램 틀(설계도)를 만든다.

        2. 필드, 맴버 변수
            : 클래스 안에 데이터(값)을 담아둔다
            => 객체의 특성/데이터

        3. 메서드(method)
            : 클래스 안에 정의된, 객체가 수행할 수 있는 동작/기능 (객체의 행동 양식) 
        
        4. 메인 메서드(main)
        : 프로그램이 시작되는 시작점

        5. 객체를 통해 메서드를 호출한다
            : 만든 객체를 이용해 값을 넣고 기능을 실행한다.
                - 객체 (Object): 실물!
                -  메서드 (Method): 객체의 '동작' 또는 '기능'
                = 객체와 메서드의 관계: '실물'이 '동작을 수행'한다
                    예) 자동차(객체)를 주차장에서(main method) 시동건다(메서드) 

  정리
  설계도(class) → 실물(new로 객체 생성) → 객체의 속성(필드) & 동작(메서드) → 메인(main)에서 시작

    | 구분             | 설명              | 기억 포인트         |
    | ---------------- | --------------- | --------------------- |
    | 클래스(class)    | 프로그램 틀(설계도)         | 자동차 도면                |
    | 필드(맴버 변수)  | 객체가 저장하는 데이터      | 자동차의 속성 (연료량, 색상 등)   |
    | 메서드(method)   | 객체가 수행할 수 있는 동작  | 자동차의 행동 (시동 걸기, 주행하기) |
    | 메인 메서드(main)| 프로그램 시작점             | 주차장에서 시동 키기           |
    | 객체(Object)     | 설계도로 만든 실물          | 실제 자동차                |
    | new              | 객체 생성 키워드            | 도면 → 자동차 생산           |
    | 점(.)            | 객체의 속성/동작 접근       | 자동차.시동걸기()            |


    [클래스] → 설계도 (Car)
    │
    new + 클래스 → [객체] 실물 자동차 (myCar)
    │
    객체.필드 → 색상 설정
    객체.메서드() → 시동 걸기
    │
    main() → 프로그램 시작, 객체 조작


2️⃣ 식별자/키워드/자료형:

 식별자 (Identifier)
| 요소     | 설명                                                          
| ---- | -------------------------------------------------------------
| 정의 | 이름을 붙여 구분하는 것                                      
| 규칙 | -  대소문자 구분/길이제한없음/숫자로 시작할 수 없음.
         - 첫 글자 숫자 X
        - 특수기호 `_`,  `$` 만 허용 | `myVar`, `StudentName`             
| 권장 | - 의미 있는 이름
         - CamelCase(낙타표기법): 변수/메서드 소문자 시작, 단어 경계 대문자    
             `studentGrade`, `calculateTotal()` 

변수 (Variable)
| 요소     | 설명                                                                                      
| -----| -------------------------------------------------
| 역할 | 데이터를 저장하는 공간                                                                                
| 종류 | - 인스턴스 변수       :  객체마다 개별로 가짐
         - 클래스 변수(static) : 객체를 만들지 않고 바로 사용 가능, 클래스가 메모리에 올라갈 때 함께 올라감.
         - 지역 변수           :  메서드/블록 안에서만 사용                
| 주의 | 지역 변수는 반드시 초기화해야 함                                                                      


자료형
| 분류                  | 설명                                          
| ------------------- | ---------------------------------------------
| 기본형 (Primitive) | 8가지 — 숫자, 문자, 논리            
                            int, double, char, boolean                
| 참조형 (Reference) | 객체/배열/문자열 — 주소(참조)로 다룸      
                            String, 배열, 객체                
| 형변환             | 큰 타입 ← 작은 타입 : 자동
                       작은 타입 ← 큰 타입 : 강제 형변환 필요
                            (int) 3.14

3️⃣ 연산자 & 제어문:
📌 1) 연산자 (Operators)
    [분류]	            [설명]	                        [예시]
    산술 연산자     	+, -, *, /, %       	        a + b
    대입 연산자	        =, +=, -=	                    x += 1;
    비교 연산자	        ==, !=, >, <, >=, <=	        a == b
    논리 연산자	        && (=AND), || (=OR), ! (=NOT)	a > 1 && b < 5
    증감 연산자	        ++, --	                        i++
    조건(삼항) 연산자	조건 ? 참 : 거짓	            int r = (a > b) ? a : b;

     -º 곱셈/나눗셈 * / % 가 덧셈/뺄셈 + - 보다 우선.
     - 괄호 ()로 우선순위 명확히!
     -  &&(and)는 ||(or)보다 우선.
     -  &&: 앞이 false면 뒤 평가 안 함.
     - ||: 앞이 true면 뒤 평가 안 함. 


    ☑️명령형 매개변수
         - 프로그램을 실행할 때(시점) 외부에서 값을 입력(전달)받는 것.
            main(String[] args) 의 args : 입력받은 문자열의 배열(args : arguments)
          = 프로그램이 시작될 때 필요한 초기 설정 값이나 데이터를 외부에서 간편하게 주입하는데 사용되는 개념

        ┌────────────┐
        │  Terminal  │
        │  사용자 입력  │
        └──────┬─────┘
            │
            ▼
        ┌────────────────────────┐
        │ main(String[] args)    │
        │ args[0] args[1] ...    │
        └──────┬─────────────────┘
            │
            ▼
        ┌────────────────────────┐
        │ System.out.println()   │
        │ 전달받은 값 출력하기     │
        └────────────────────────┘


 2)자료형











 3)연산자와 제어문

